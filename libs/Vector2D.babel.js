function _typeof(o){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _classCallCheck(a,n){if(!(a instanceof n))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,r){for(var t=0;t<r.length;t++){var o=r[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,_toPropertyKey(o.key),o)}}function _createClass(e,r,t){return r&&_defineProperties(e.prototype,r),t&&_defineProperties(e,t),Object.defineProperty(e,"prototype",{writable:!1}),e}function _toPropertyKey(t){var i=_toPrimitive(t,"string");return"symbol"==_typeof(i)?i:i+""}function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}var Vector2D=function(){function Vector2D(){var x=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;var y=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;_classCallCheck(this,Vector2D);this.x=x;this.y=y}return _createClass(Vector2D,[{key:"norm",get:function get(){return Math.hypot(this.x,this.y)},set:function set(val){}},{key:"dir",get:function get(){return Math.atan2(this.y,this.x)},set:function set(val){}},{key:"copy",value:function copy(){return new Vector2D(this.x,this.y)}},{key:"add",value:function add(vec){this.x+=vec.x;this.y+=vec.y;return this}},{key:"sub",value:function sub(vec){this.x-=vec.x;this.y-=vec.y;return this}},{key:"dot",value:function dot(vec){return this.x*vec.x+this.y*vec.y}},{key:"cross",value:function cross(vec){return this.x*vec.y-this.y*vec.x}},{key:"scale",value:function scale(s){this.x*=s;this.y*=s;return this}},{key:"rotate",value:function rotate(rad){var cos=Math.cos(rad);var sin=Math.sin(rad);var x=this.x,y=this.y;this.x=cos*x+sin*y;this.y=-sin*x+cos*y;return this}},{key:"normalize",value:function normalize(){return this.scale(1/this.norm)}}])}();