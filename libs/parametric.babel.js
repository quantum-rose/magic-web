function draw(points,cvsCtx){var _ref=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{},_ref$lineWidth=_ref.lineWidth,lineWidth=_ref$lineWidth===void 0?1:_ref$lineWidth,_ref$strokeStyle=_ref.strokeStyle,strokeStyle=_ref$strokeStyle===void 0?"black":_ref$strokeStyle,_ref$fillStyle=_ref.fillStyle,fillStyle=_ref$fillStyle===void 0?null:_ref$fillStyle,_ref$close=_ref.close,close=_ref$close===void 0?false:_ref$close;cvsCtx.save();cvsCtx.lineWidth=lineWidth;cvsCtx.strokeStyle=strokeStyle;cvsCtx.beginPath();cvsCtx.moveTo(points[0][0],points[0][1]);for(var i=1;i<points.length;i++){cvsCtx.lineTo(points[i][0],points[i][1])}if(close)cvsCtx.closePath();if(fillStyle){cvsCtx.fillStyle=fillStyle;cvsCtx.fill()}cvsCtx.stroke();cvsCtx.restore()}function parametric(func){return function(start,end){var segments=arguments.length>2&&arguments[2]!==undefined?arguments[2]:100;var points=[];for(var _len=arguments.length,args=new Array(_len>3?_len-3:0),_key=3;_key<_len;_key++){args[_key-3]=arguments[_key]}for(var i=0;i<=segments;i++){points[i]=func.apply(void 0,[(end-start)/segments*i+start].concat(args))}return{points:points,draw:draw.bind(null,points)}}}